{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"View and control remote terminals from your browser Documentation : https://cs01.github.io/termpair Source Code : https://github.com/cs01/termpair What is TermPair? TermPair lets developers share and control terminals in real time. Usage Start the TermPair server: >> termpair serve INFO: Started server process [15455] INFO: Waiting for application startup. INFO: Application startup complete. INFO: Uvicorn running on http://localhost:8000 (Press CTRL+C to quit) INFO: ('127.0.0.1', 35470) - \"WebSocket /connect_to_terminal\" [accepted] Then share your terminal by running: >> termpair share -a -------------------------------------------------------------------------------- Running '/bin/bash' and sharing to 'http://localhost:8000/?terminal_id=b26903e19ffff2bc9ace60491e8200d5'. Type 'exit' or close terminal to stop sharing. -------------------------------------------------------------------------------- You can share that URL with whoever you want. Note that anyone that has it can view and possible control your terminal. The server multicasts terminal output to as many browsers that connect to the session. Installation Use pipx to run the latest version without installing: >> pipx run termpair serve >> pipx run termpair share -b You can also install using pipx or pip: >> pipx install termpair or >> pip install termpair API To view the command line API reference, run: termpair --help System Requirements Python: 3.6+ Operating System: To view/control from the browser: All operating systems are supported. To run the server, termpair serve : Tested on Linux. Should work on macOS. Might work on Windows. To share your terminal, termpair share : Tested on Linux. Should work on macOS. Probably doesn't work on Windows.","title":"Overview"},{"location":"#what-is-termpair","text":"TermPair lets developers share and control terminals in real time.","title":"What is TermPair?"},{"location":"#usage","text":"Start the TermPair server: >> termpair serve INFO: Started server process [15455] INFO: Waiting for application startup. INFO: Application startup complete. INFO: Uvicorn running on http://localhost:8000 (Press CTRL+C to quit) INFO: ('127.0.0.1', 35470) - \"WebSocket /connect_to_terminal\" [accepted] Then share your terminal by running: >> termpair share -a -------------------------------------------------------------------------------- Running '/bin/bash' and sharing to 'http://localhost:8000/?terminal_id=b26903e19ffff2bc9ace60491e8200d5'. Type 'exit' or close terminal to stop sharing. -------------------------------------------------------------------------------- You can share that URL with whoever you want. Note that anyone that has it can view and possible control your terminal. The server multicasts terminal output to as many browsers that connect to the session.","title":"Usage"},{"location":"#installation","text":"Use pipx to run the latest version without installing: >> pipx run termpair serve >> pipx run termpair share -b You can also install using pipx or pip: >> pipx install termpair or >> pip install termpair","title":"Installation"},{"location":"#api","text":"To view the command line API reference, run: termpair --help","title":"API"},{"location":"#system-requirements","text":"Python: 3.6+ Operating System: To view/control from the browser: All operating systems are supported. To run the server, termpair serve : Tested on Linux. Should work on macOS. Might work on Windows. To share your terminal, termpair share : Tested on Linux. Should work on macOS. Probably doesn't work on Windows.","title":"System Requirements"},{"location":"contributing/","text":"Contributing guidelines We're glad to see you here! This short document should give you some hints to get started with contributing to TermPair. Getting started First, fork the repo and clone it to your computer, then read the section you're interested in. \ud83d\udc4d Contributing Python code Install nox , then run the server with: nox -s serve After the server is running, you can share your terminal to it: nox -s broadcast Then type exit to stop broadcasting. Contributing frontend code To modify frontend code, get yarn and run: make install_frontend to install dependencies. You'll then be able to build the frontend app using: make build_frontend You'll need to reload the TermPair server for changes to be taken into account. Stop it with Ctrl+C , then restart it. Alternatively, changes that don't require an actively connected terminal can be tested much more easily with hot reloading by running: make watch_frontend Contributing documentation TermPair's documentation is built with MkDocs and the MkDocs Material theme and is in the docs/ directory. To view documentation locally, run: nox -s watch_docs Proposing changes If you've found a bug, have a feature request, or would like to contribute documentation, here's what you can do to have your change merged in: (Recommended) If the problem is non-trivial, you should open an issue to discuss it with maintainers. Work on a separate branch, and make sure tests pass before pushing them to the remote. Open a pull request with your changes.","title":"Contributing"},{"location":"contributing/#contributing-guidelines","text":"We're glad to see you here! This short document should give you some hints to get started with contributing to TermPair.","title":"Contributing guidelines"},{"location":"contributing/#getting-started","text":"First, fork the repo and clone it to your computer, then read the section you're interested in. \ud83d\udc4d","title":"Getting started"},{"location":"contributing/#contributing-python-code","text":"Install nox , then run the server with: nox -s serve After the server is running, you can share your terminal to it: nox -s broadcast Then type exit to stop broadcasting.","title":"Contributing Python code"},{"location":"contributing/#contributing-frontend-code","text":"To modify frontend code, get yarn and run: make install_frontend to install dependencies. You'll then be able to build the frontend app using: make build_frontend You'll need to reload the TermPair server for changes to be taken into account. Stop it with Ctrl+C , then restart it. Alternatively, changes that don't require an actively connected terminal can be tested much more easily with hot reloading by running: make watch_frontend","title":"Contributing frontend code"},{"location":"contributing/#contributing-documentation","text":"TermPair's documentation is built with MkDocs and the MkDocs Material theme and is in the docs/ directory. To view documentation locally, run: nox -s watch_docs","title":"Contributing documentation"},{"location":"contributing/#proposing-changes","text":"If you've found a bug, have a feature request, or would like to contribute documentation, here's what you can do to have your change merged in: (Recommended) If the problem is non-trivial, you should open an issue to discuss it with maintainers. Work on a separate branch, and make sure tests pass before pushing them to the remote. Open a pull request with your changes.","title":"Proposing changes"}]}