{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"View and control remote terminals from your browser Documentation : https://cs01.github.io/termpair Source Code : https://github.com/cs01/termpair What is TermPair? TermPair lets developers share and control terminals in real time. Usage Start the TermPair server: termpair serve Then share your terminal by running: termpair share A URL will be printed to the terminal, such as: http://localhost:8000/?id=5a32e471453c0bb0c642acbbd6ee58f8 That URL is valid for the current terminal sharing session. The session ends when the process being broadcast ends, usually by typing quit or exit , or by closing the terminal window. At that time, the URL is no longer valid. The session can be shared with others who you want to view and optionally control your terminal from a browser. Pass the -a flag to grant the browser control of the terminal: termpair share -a Quickstart To quickly get up and running (without even having to install to your system!), use pipx to start the server: pipx run termpair serve Then share your client by running pipx run termpair share -b The -b flag will automatically open a browser tab to view the shared terminal. Installation You can install using pipx or pip: pipx install termpair or pip install termpair API To view the command line API reference, run: termpair --help Security Considerations It should go without saying but this can be extremely dangerous if you use it improperly. You should only broadcast a terminal session you want to be shared, and only share the URL with those you trust. No password is required after opening the URL, so consider it to be sensitive information! By using TermPair, anyone with the sharable URL can: View every keystroke you make (even passwords that appear hidden in the terminal). View every character output by the terminal. If you are in a public location, someone over your shoulder could see this url, or take a picture of it, providing them the ability to view or control your termpair session. If you allow other users to control your terminal, they can: Run any commands. View/modify/delete any files. Restart or corrupt your computer. Install a virus. If you run the server locally on the default host, it will not be accessible to anyone other than you. These security implications apply if you are exposing the port to others. System Requirements Operating System: To view/control from the browser: All operating systems are supported. To run the server, termpair serve : Tested on Linux. Should work on macOS. Might work on Windows. To share your terminal, termpair share : Tested on Linux. Should work on macOS. Probably doesn't work on Windows. Python: 3.6 Run Server The server acts as a router between a unix terminal broadcasting and the browser(s) that are remotely viewing the terminal. It must be started before a terminal session can be broadcast. $ termpair serve INFO: Started server process [16592] INFO: Waiting for application startup. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Terminals can now broadcast to http://127.0.0.1:8000 \ud83c\udf89. Broadcast Your Terminal To let others view your terminal: $ termpair share Your terminal is now viewable at localhost:8000/?id=e8a7c806102134022455ddd1841470ed . \ud83c\udf89 To let others view and remotely control your terminal: $ termpair share -a ... WARNING: Your terminal is viewable AND controllable from localhost:8000/?id=e8a7c806102134022455ddd1841470ed ... When you run this, a new pty process is started locally, and by default launches a new instance of the shell you are using, such as bash . But it can run any executable, interactive or not, with any arguments you want to supply. You can pass the --cmd flag to specify the process that is shared in the terminal session. termpair share # shares current SHELL. Can run anything from within here, like vim. termpair share --cmd $SHELL # equivalent to the above command termpair share --cmd \"python\" termpair share --cmd \"gdb\" termpair share --cmd \"gdb -p 1234\" The sharing session ends when the process the terminal was sharing ends, usually by typing exit or quit . It can also be ended by closing the terminal itself. Each session is assigned a unique TermPair session id, which is a short string of characters. The session id is never shared with the server or any viewers watching the session.","title":"Overview"},{"location":"#what-is-termpair","text":"TermPair lets developers share and control terminals in real time.","title":"What is TermPair?"},{"location":"#usage","text":"Start the TermPair server: termpair serve Then share your terminal by running: termpair share A URL will be printed to the terminal, such as: http://localhost:8000/?id=5a32e471453c0bb0c642acbbd6ee58f8 That URL is valid for the current terminal sharing session. The session ends when the process being broadcast ends, usually by typing quit or exit , or by closing the terminal window. At that time, the URL is no longer valid. The session can be shared with others who you want to view and optionally control your terminal from a browser. Pass the -a flag to grant the browser control of the terminal: termpair share -a","title":"Usage"},{"location":"#quickstart","text":"To quickly get up and running (without even having to install to your system!), use pipx to start the server: pipx run termpair serve Then share your client by running pipx run termpair share -b The -b flag will automatically open a browser tab to view the shared terminal.","title":"Quickstart"},{"location":"#installation","text":"You can install using pipx or pip: pipx install termpair or pip install termpair","title":"Installation"},{"location":"#api","text":"To view the command line API reference, run: termpair --help","title":"API"},{"location":"#security-considerations","text":"It should go without saying but this can be extremely dangerous if you use it improperly. You should only broadcast a terminal session you want to be shared, and only share the URL with those you trust. No password is required after opening the URL, so consider it to be sensitive information! By using TermPair, anyone with the sharable URL can: View every keystroke you make (even passwords that appear hidden in the terminal). View every character output by the terminal. If you are in a public location, someone over your shoulder could see this url, or take a picture of it, providing them the ability to view or control your termpair session. If you allow other users to control your terminal, they can: Run any commands. View/modify/delete any files. Restart or corrupt your computer. Install a virus. If you run the server locally on the default host, it will not be accessible to anyone other than you. These security implications apply if you are exposing the port to others.","title":"Security Considerations"},{"location":"#system-requirements","text":"Operating System: To view/control from the browser: All operating systems are supported. To run the server, termpair serve : Tested on Linux. Should work on macOS. Might work on Windows. To share your terminal, termpair share : Tested on Linux. Should work on macOS. Probably doesn't work on Windows. Python: 3.6","title":"System Requirements"},{"location":"#run-server","text":"The server acts as a router between a unix terminal broadcasting and the browser(s) that are remotely viewing the terminal. It must be started before a terminal session can be broadcast. $ termpair serve INFO: Started server process [16592] INFO: Waiting for application startup. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Terminals can now broadcast to http://127.0.0.1:8000 \ud83c\udf89.","title":"Run Server"},{"location":"#broadcast-your-terminal","text":"To let others view your terminal: $ termpair share Your terminal is now viewable at localhost:8000/?id=e8a7c806102134022455ddd1841470ed . \ud83c\udf89 To let others view and remotely control your terminal: $ termpair share -a ... WARNING: Your terminal is viewable AND controllable from localhost:8000/?id=e8a7c806102134022455ddd1841470ed ... When you run this, a new pty process is started locally, and by default launches a new instance of the shell you are using, such as bash . But it can run any executable, interactive or not, with any arguments you want to supply. You can pass the --cmd flag to specify the process that is shared in the terminal session. termpair share # shares current SHELL. Can run anything from within here, like vim. termpair share --cmd $SHELL # equivalent to the above command termpair share --cmd \"python\" termpair share --cmd \"gdb\" termpair share --cmd \"gdb -p 1234\" The sharing session ends when the process the terminal was sharing ends, usually by typing exit or quit . It can also be ended by closing the terminal itself. Each session is assigned a unique TermPair session id, which is a short string of characters. The session id is never shared with the server or any viewers watching the session.","title":"Broadcast Your Terminal"},{"location":"contributing/","text":"Contributing guidelines We're glad to see you here! This short document should give you some hints to get started with contributing to TermPair. Getting started First, fork the repo and clone it to your computer, then read the section you're interested in. \ud83d\udc4d Contributing Python code Install nox , then run the server with: nox -s serve After the server is running, you can share your terminal to it: nox -s broadcast Then type exit to stop broadcasting. Contributing frontend code To modify frontend code, get yarn and run: make install_frontend to install dependencies. You'll then be able to build the frontend app using: make build_frontend You'll need to reload the TermPair server for changes to be taken into account. Stop it with Ctrl+C , then restart it. Alternatively, changes that don't require an actively connected terminal can be tested much more easily with hot reloading by running: make watch_frontend Contributing documentation TermPair's documentation is built with MkDocs and the MkDocs Material theme and is in the docs/ directory. To view documentation locally, run: nox -s watch_docs Proposing changes If you've found a bug, have a feature request, or would like to contribute documentation, here's what you can do to have your change merged in: (Recommended) If the problem is non-trivial, you should open an issue to discuss it with maintainers. Work on a separate branch, and make sure tests pass before pushing them to the remote. Open a pull request with your changes.","title":"Contributing"},{"location":"contributing/#contributing-guidelines","text":"We're glad to see you here! This short document should give you some hints to get started with contributing to TermPair.","title":"Contributing guidelines"},{"location":"contributing/#getting-started","text":"First, fork the repo and clone it to your computer, then read the section you're interested in. \ud83d\udc4d","title":"Getting started"},{"location":"contributing/#contributing-python-code","text":"Install nox , then run the server with: nox -s serve After the server is running, you can share your terminal to it: nox -s broadcast Then type exit to stop broadcasting.","title":"Contributing Python code"},{"location":"contributing/#contributing-frontend-code","text":"To modify frontend code, get yarn and run: make install_frontend to install dependencies. You'll then be able to build the frontend app using: make build_frontend You'll need to reload the TermPair server for changes to be taken into account. Stop it with Ctrl+C , then restart it. Alternatively, changes that don't require an actively connected terminal can be tested much more easily with hot reloading by running: make watch_frontend","title":"Contributing frontend code"},{"location":"contributing/#contributing-documentation","text":"TermPair's documentation is built with MkDocs and the MkDocs Material theme and is in the docs/ directory. To view documentation locally, run: nox -s watch_docs","title":"Contributing documentation"},{"location":"contributing/#proposing-changes","text":"If you've found a bug, have a feature request, or would like to contribute documentation, here's what you can do to have your change merged in: (Recommended) If the problem is non-trivial, you should open an issue to discuss it with maintainers. Work on a separate branch, and make sure tests pass before pushing them to the remote. Open a pull request with your changes.","title":"Proposing changes"}]}